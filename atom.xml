<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://sarahduve.github.io/atom.xml" rel="self"/>
  <link href="http://sarahduve.github.io/"/>
  <updated>2013-06-17T09:28:45-04:00</updated>
  <id>http://sarahduve.github.io/</id>
  <author>
    <name><![CDATA[Sarah Duve]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Place of Flash Cards]]></title>
    <link href="http://sarahduve.github.io/blog/2013/06/17/the-place-of-flash-cards/"/>
    <updated>2013-06-17T04:11:00-04:00</updated>
    <id>http://sarahduve.github.io/blog/2013/06/17/the-place-of-flash-cards</id>
    <content type="html"><![CDATA[<p><a href="http://www.speakerdeck.com">Speaker Deck</a> is a great resource for finding technical talks from conferences you&rsquo;d otherwise never be able to attend. The downside is that every speaker utilizes their deck differently when presenting, and since Speaker Deck only hosts the static slides (that is, not accompanying video or audio), it can sometimes be difficult to ascertain a speaker&rsquo;s meaning from their slides alone. Peter Evjan, the author of &ldquo;<a href="https://speakerdeck.com/evjan/using-flash-cards-to-improve-your-ruby">Using flash cards to improve your Ruby</a>&rdquo;, the talk I&rsquo;ll be discussing here (given at RubyKaigi in Toyko just a few weeks ago!), admits as much in the notes accompanying his deck. But even when that&rsquo;s the case, these decks can serve as great jumping-off points to explore more on your own, and frequently yes, they are damn beautiful!</p>

<script async class="speakerdeck-embed" data-slide="3" data-id="01bed5c0b80c013018cb5a7f351b6bd1" data-ratio="1.33333333333333" src="http://sarahduve.github.io//speakerdeck.com/assets/embed.js"></script>


<p>At first blush, flash cards seem like an odd tool when it comes to learning to programming. After all, flash cards belong to the domain of rote memorization, to the childhood state capitals quiz &ndash; information that is tested once and rarely used again. In my study of Ruby I&rsquo;m not looking to spit out term definitions, but to one day be able to nimbly apply concepts in practical settings. And one thing I&rsquo;ve been told more than once is that programming is less about what you know, and more what you can figure out. One topic that comes up a lot at a place like Flatiron School is the existence different learning styles, and last week in particular, the wisdom of reading programming books cover to cover. Avi offered that he first reads such books for breadth, just enough to become aware that a particular concept exists, and then later to remember where he read about it (further emphasizing the &ldquo;figuring out&rdquo; aspect of programming).</p>

<p>So again, what&rsquo;s the use of flash cards? As someone who in just the last week alone wasted time writing &ldquo;my own&rdquo; .collect and .each_with_index methods because I either wasn&rsquo;t aware they existed or forgot how they worked, I can see the benefits of memorization in this regard -it potentially saves a lot of time! Memorizing exactly how .collect works and what it returns would make it easier for me to recognize when to use it in practice. I&rsquo;ve also seen instances where a classmate suggested a method that no one else was even aware of. For those less-frequently used methods, flash cards might be a good answer to that &ldquo;know that they exist&rdquo; part of the equation. And as someone who is learning a bunch of new technologies at once, learning the correct terminology to go along with them is crucial to being able to discuss programming issues in a meaningful matter. So perhaps a little terms memorization isn&rsquo;t uncalled for after all.</p>

<p>It&rsquo;s worth mentioning that Evjan is advocating for a more sophisticated type of flash card use than we may have used for those state capitals &ndash;<a href="http://en.wikipedia.org/wiki/Spaced_repetition">spaced repetition</a> as utilized by the (mostly free) flash card program <a href="http://ankisrs.net/">Anki</a>. Spaced repetition is a learning technique that takes advantage of the spacing effect, which holds that items are more easily recalled when they are studied a few times over a longer period of time as opposed to many times over a short period of time. Anki takes feedback from the user after each answer (on whether it was remembered easily, with a small error, etc.) to construct an algorithm that determines when and how often to quiz the user again on that particular item. I&rsquo;ve just started to look into the capabilities of Anki, but I look forward to finding ways to incorporate it into my Ruby regimen!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I'm Learning to Code]]></title>
    <link href="http://sarahduve.github.io/blog/2013/06/13/why-im-learning-to-code/"/>
    <updated>2013-06-13T03:30:00-04:00</updated>
    <id>http://sarahduve.github.io/blog/2013/06/13/why-im-learning-to-code</id>
    <content type="html"><![CDATA[<p>Because I have a tendency to be long winded and um, “tangential,” I’ve tended to approach the “why code?” question with a convenient “oh, <em>lots</em> of reasons” in the interest of sparing people my spiel. But since a first post is the perfect the opportunity to explore these reasons and tuck them away for easy reference, I thought I’d share a few here.</p>

<h3>A (nearly) life long fascination</h3>

<p>I initially became interested in how technology has changed the way we relate and communicate with each other because I could see it firsthand in my own life. AIM was huge when I was in high school and junior high. I owe the formation of several friendships to it, and as we all went our separate ways for college, the maintenance of many others. I find that quite remarkable for a form of communication that none of us were using just a few years before (not to mention one that, ten years later, no one is using now!)</p>

<p>As a former student of psychology I’m especially interested identifying the little peculiarities of online behavior and harnessing them for good. For instance, how can we use the internet’s protective shield of anonymity to encourage something other than horrific comment sections, like say, getting past the stigma of seeking mental health care?</p>

<p>Some other long term, big picture ideas I hope to eventually engage with: What is our always-on, multitasking culture doing to our attention spans? How can we take advantage of online dating without resorting to treating our fellow human beings like infinitely replaceable objects?</p>

<p>Ultimately I’m interested in working at companies that are using technology to make real life better. Learning to code is the first step.</p>

<h3>Do I have a choice?</h3>

<p>I’ve now worked in two industries that have been irreparably altered by technology: publishing and music. In neither case was this a change fostered from within, but rather forced from the outside. And if you believe software is truly eating the world, few industries will escape a similar disruption. To me that means adapt or become irrelevant.</p>

<h3>Be the change (or something like that)</h3>

<p>At some point I just got sick of repeatedly reading articles about the tech talent shortage (especially in New York) as well as abysmal gender ratios. To paraphrase one of our recent <a href="https://www.twitter.com/laurenvoswinkel">guest speakers</a>, when you have a homogeneous tech work force, you have the same kinds of problems being addressed over and over again. Diversity in tech isn’t important merely because it’s politically correct or an ideal we should aim for, it’s important because it has real, serious implications for society. There’s no reason to resign yourself to unsatisfying work in a sector with increasingly few opportunities when there’s so much to be done elsewhere. And when you develop software, that elsewhere can be nearly <em>anywhere</em>.</p>

<h3>Never again</h3>

<p>I’ve already wasted way too much of my life just accepting conventional wisdom that there was no better way to do a particular task, only to realize later (in some cases much later), “why yes, there’s an Excel function for precisely that thing!” etc. I love that programming is about finding solutions to problems, and then making them as efficient as possible. The great thing about technology is that there’s always a &ldquo;better way&rdquo; to discover (or create!).</p>

<h3>Brooklyn Based</h3>

<p>In a very real and concrete way, I’m here because of <a href="http://brooklynbased.net/email/2012/05/help-wanted-and-found-in-brooklyns-tech-scene/">this</a> Brooklyn Based email I received a year ago -my first exposure to organizations like Skillcrush, Girl Develop It, and Hacker School. I had been interested in learning to code for a while, but felt like I really missed my chance by not studying CS in college, and suspected I could never get past the hobbyist level on my own. Being introduced to the idea that so many programmers were self taught anyway, and that there were now so many opportunities to learn that didn’t involve the wholesale “going back to school” really created a possibility in my mind that hadn’t been there before. That’s one daily email I’m glad I didn’t auto-delete!</p>
]]></content>
  </entry>
  
</feed>
